@page "/search"
@using Microsoft.EntityFrameworkCore
@using StrongBuy.Blazor.Components.Layout
@using StrongBuy.Blazor.Models
@inject StrongBuyContext Context
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>商品搜尋</PageTitle>

<div class="search-container">
    <div class="search-sidebar">
        <div class="filter-section">
            <h3>所有分類</h3>
            @* <div class="filter-list"> *@
            @*     @foreach (var category in Categories) *@
            @*     { *@
            @*         <div class="filter-item"> *@
            @*             <a href="/search?category=@category" *@
            @*                class="@(SearchModelObj.SelectedCategory == category ? "selected" : "")"> *@
            @*                 @category *@
            @*             </a> *@
            @*         </div> *@
            @*     } *@
            @* </div> *@

            <div class="filter-list">
                @foreach (var category in Categories)
                {
                    <div class="filter-item">
                        <input type="button" value="@category" @onclick="() => RedirectWithNewCategory(category)"
                               class="filter-button @(SearchModelObj.SelectedCategory == category ? "selected" : "")"/>
                        @if (SearchModelObj.SelectedCategory == category)
                        {
                            <button class="clear-filter" @onclick="() => RedirectWithNewCategory(null)">x</button>
                        }
                    </div>
                }
            </div>
        </div>

        <div class="filter-section">
            <h3>品牌</h3>
            <div class="filter-list">
                @foreach (var brand in Brands)
                {
                    <div class="filter-item">
                        <label class="checkbox-label">
                            <input type="checkbox" checked="@(SearchModelObj?.FilterBrands?.Contains(brand) ?? false)"
                                   @onchange="(e) => ToggleBrandFilter(brand)"/>
                            <span class="brand-name">@brand</span>
                        </label>
                    </div>
                }
            </div>
        </div>

        @* <div class="filter-section"> *@
        @*     <h3>價格</h3> *@
        @*     <div class="filter-list"> *@
        @*         <div class="filter-item"> *@
        @*             <a href="#">NT$0 - NT$2,000</a> *@
        @*         </div> *@
        @*         <div class="filter-item"> *@
        @*             <a href="#">NT$2,000 - NT$5,000</a> *@
        @*         </div> *@
        @*         <div class="filter-item"> *@
        @*             <a href="#">NT$5,000以上</a> *@
        @*         </div> *@
        @*     </div> *@
        @* </div> *@

        @* <div class="filter-section"> *@
        @*     <h3>顧客評價</h3> *@
        @*     <div class="filter-list"> *@
        @*         <div class="filter-item"> *@
        @*             <a href="#"> *@
        @*                 <span class="stars">★★★★★</span> 以上 *@
        @*             </a> *@
        @*         </div> *@
        @*         <div class="filter-item"> *@
        @*             <a href="#"> *@
        @*                 <span class="stars">★★★★</span> 以上 *@
        @*             </a> *@
        @*         </div> *@
        @*         <div class="filter-item"> *@
        @*             <a href="#"> *@
        @*                 <span class="stars">★★★</span> 以上 *@
        @*             </a> *@
        @*         </div> *@
        @*     </div> *@
        @* </div> *@
    </div>

    <div class="search-results">
        <div class="results-header">
            <span>1-@ProductsList.Count 件，共 @ProductsList.Count 件</span>
            @* <select class="sort-select" @bind="SearchModelObj.SortOption" @onchange="OnSortChanged"> *@
            @* <select class="sort-select" @onchange="OnSortChanged"> *@
            @*     <option value="">精選</option> *@
            @*     <option value="price_asc">價格：由低到高</option> *@
            @*     <option value="price_desc">價格：由高到低</option> *@
            @*     <option value="rating">平均顧客評價</option> *@
            @*     <option value="newest">最新上架</option> *@
            @* </select> *@

            @* <InputSelect class="sort-select" Value="@SearchModelObj.SortOption"
                         ValueChanged="@((string? value) => OnSortOptionChanged(value))">
                <option value="">精選</option>
                <option value="price_asc">價格：由低到高</option>
                <option value="price_desc">價格：由高到低</option>
                <option value="rating">平均顧客評價</option>
                <option value="newest">最新上架</option>
            </InputSelect> *@

            <select class="sort-select" value="@SearchModelObj.SortOption"
                    @onchange="@((ChangeEventArgs e) => OnSortOptionChanged(e.Value?.ToString()))">
                <option value="">精選</option>
                <option value="price_asc">價格：由低到高</option>
                <option value="price_desc">價格：由高到低</option>
                @* <option value="rating">平均顧客評價</option> *@
                @* <option value="newest">最新上架</option> *@
            </select>

        </div>

        <div class="products-grid">
            @foreach (var product in ProductsList)
            {
                <div class="product-card">
                    <div class="product-image">
                        <img src="https://fakeimg.pl/300x300/?retina=1&font=noto&font_size=30&text=@Uri.EscapeDataString(product.Name)"
                             alt="@product.Name">
                    </div>
                    <div class="product-info">
                        <h2 class="product-title">
                            <a href="/product/@product.Id">@product.Name</a>
                        </h2>
                        <div class="product-brand">
                            <span class="brand">@product.Brand</span>
                        </div>
                        @* <div class="product-rating">
                            <span class="stars">★★★★★</span>
                            <span class="rating-count">@product.Reviews.Count</span>
                        </div> *@
                        <div class="product-price">
                            <span class="currency">NT$</span>
                            <span class="amount">@product.Price.ToString("N0")</span>
                        </div>
                        <div class="product-description">
                            @product.Description
                        </div>
                        @* <div class="product-delivery">
                            <span>符合免運資格</span>
                        </div> *@
                        @* @if ((DateTime.Now - product.CreatedAt).TotalDays <= 7)
                        {
                            <div class="new-product-badge">新品上架</div>
                        } *@
                        <button class="show-reviews-btn" @onclick="() => ShowReviews(product)">
                            顯示評論 (@product.Reviews.Count)
                        </button>
                    </div>
                </div>
            }
        </div>

        @if (selectedProduct != null)
        {
            <div class="reviews-modal @(isReviewsVisible ? "show" : "")">
                <div class="reviews-content">
                    <div class="reviews-header">
                        <h3>@selectedProduct.Name 的評論</h3>
                        <button class="close-reviews" @onclick="HideReviews">×</button>
                    </div>
                    <div class="reviews-list">
                        @if (selectedProduct.Reviews.Any())
                        {
                            @foreach (var review in selectedProduct.Reviews)
                            {
                                <div class="review-item">
                                    <div class="review-rating">
                                        @for (int i = 0; i < review.Rating; i++)
                                        {
                                            <span class="star">★</span>
                                        }
                                    </div>
                                    <div class="review-content">@review.Comment</div>
                                    @* <div class="review-date">@review.CreatedAt.ToString("yyyy/MM/dd")</div> *@
                                </div>
                            }
                        }
                        else
                        {
                            <div class="no-reviews">目前沒有評論</div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .search-container {
        display: flex;
        gap: 20px;
        padding: 20px;
        max-width: 1500px;
        margin: 0 auto;
    }

    .search-sidebar {
        width: 240px;
        flex-shrink: 0;
    }

    .filter-section {
        margin-bottom: 20px;
    }

    .filter-section h3 {
        font-size: 16px;
        margin-bottom: 10px;
    }

    .filter-list {
        font-size: 14px;
    }

    .filter-item {
        margin: 4px 0;
        display: flex;
        align-items: center;
        gap: 4px;
        /* 控制按鈕和文字之間的間距 */
    }

    .filter-item {
        margin: 4px 0;
        display: flex;
        align-items: center;
    }

    .clear-filter {
        background: none;
        border: 1px solid #d5d9d9;
        color: #333;
        cursor: pointer;
        padding: 2px 6px;
        font-size: 18px;
        font-weight: bold;
        line-height: 1;
        border-radius: 50%;
        transition: all 0.2s ease;
    }

    .clear-filter:hover {
        color: #fff;
        background-color: #c45500;
        border-color: #c45500;
    }

    .filter-item a:hover {
        color: #c45500;
        text-decoration: underline;
    }

    .filter-item a.selected {
        color: #c45500;
        font-weight: bold;
    }

    .filter-button {
        width: auto;
        /* 改為 auto 而不是 100% */
        text-align: left;
        background: none;
        border: none;
        padding: 4px 8px;
        cursor: pointer;
        color: #0066c0;
        font-size: 14px;
    }

    .filter-button:hover {
        color: #c45500;
        text-decoration: underline;
    }

    .filter-button.selected {
        color: #c45500;
        font-weight: bold;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        cursor: pointer;
        padding: 4px 0;
    }

    .checkbox-label input[type="checkbox"] {
        margin-right: 8px;
    }

    .brand-name {
        color: #0066c0;
    }

    .checkbox-label:hover .brand-name {
        color: #c45500;
        text-decoration: underline;
    }

    .search-results {
        flex-grow: 1;
    }

    .results-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding: 8px 0;
        border-bottom: 1px solid #ddd;
    }

    .sort-select {
        padding: 5px;
        border: 1px solid #ddd;
        border-radius: 3px;
    }

    .products-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }

    .product-card {
        display: flex;
        gap: 15px;
        padding: 15px;
        background: white;
        border: 1px solid #ddd;
        height: 210px;
        /* 固定卡片高度 */
    }

    .product-image {
        width: 180px;
        height: 180px;
        flex-shrink: 0;
        /* 防止圖片區域被壓縮 */
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .product-image img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        max-width: 100%;
        max-height: 100%;
    }

    .product-info {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        /* 確保內容不會溢出 */
        width: 0;
        /* 搭配 flex-grow: 1 使用，確保文字正確換行 */
    }

    .product-title {
        font-size: 16px;
        margin: 0 0 8px 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .product-title a {
        color: #0066c0;
        text-decoration: none;
    }

    .product-title a:hover {
        color: #c45500;
        text-decoration: underline;
    }

    .product-rating {
        margin-bottom: 8px;
    }

    .stars {
        color: #ffa41c;
    }

    .rating-count {
        color: #007185;
        margin-left: 5px;
    }

    .product-price {
        font-size: 20px;
        margin-bottom: 8px;
    }

    .currency {
        font-size: 12px;
        position: relative;
        top: -5px;
    }

    .product-delivery {
        font-size: 14px;
        color: #565959;
    }

    .product-brand {
        margin-bottom: 8px;
        color: #565959;
        font-size: 14px;
    }

    .new-product-badge {
        display: inline-block;
        background-color: #c45500;
        color: white;
        padding: 2px 8px;
        border-radius: 3px;
        font-size: 12px;
        margin-top: 8px;
    }

    .product-description {
        color: #565959;
        font-size: 14px;
        margin: 8px 0;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 1.4;
        max-height: 2.8em;
        flex-shrink: 0;
        /* 防止描述區域被壓縮 */
    }

    .show-reviews-btn {
        background-color: #f0f2f2;
        border: 1px solid #d5d9d9;
        border-radius: 4px;
        padding: 4px 8px;
        cursor: pointer;
        font-size: 13px;
        margin-top: auto;
    }

    .show-reviews-btn:hover {
        background-color: #e3e6e6;
    }

    .reviews-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }

    .reviews-modal.show {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .reviews-content {
        background: white;
        width: 90%;
        max-width: 600px;
        max-height: 80vh;
        border-radius: 8px;
        overflow: hidden;
        display: flex;
        flex-direction: column;
    }

    .reviews-header {
        padding: 16px;
        border-bottom: 1px solid #ddd;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .reviews-header h3 {
        margin: 0;
    }

    .close-reviews {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        padding: 0 8px;
    }

    .reviews-list {
        padding: 16px;
        overflow-y: auto;
    }

    .review-item {
        padding: 12px 0;
        border-bottom: 1px solid #eee;
    }

    .review-item:last-child {
        border-bottom: none;
    }

    .review-rating {
        color: #ffa41c;
        margin-bottom: 8px;
    }

    .review-content {
        margin-bottom: 8px;
        line-height: 1.4;
    }

    .review-date {
        color: #565959;
        font-size: 12px;
    }

    .no-reviews {
        text-align: center;
        color: #565959;
        padding: 20px;
    }
</style>

@code {
    private List<Product> ProductsList = new();
    private List<string> Categories = new();
    private List<string> Brands = new();

    //[SupplyParameterFromForm(FormName = "my-search-form")]
    private NavMenu.SearchModel SearchModelObj { get; set; } = new NavMenu.SearchModel();

    private Product? selectedProduct;
    private bool isReviewsVisible;

    //private string? SelectedCategory;
    //private string? SortOption;

    protected override async Task OnInitializedAsync()
    {
        // Get parameters from query string
        var uri = new Uri(Navigation.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        //SelectedCategory = queryString["category"];
        // var searchQuery = queryString["q"];
        // SortOption = queryString["sort"];

        SearchModelObj.SearchText = queryString["q"];
        SearchModelObj.SelectedCategory = queryString["category"];
        SearchModelObj.FilterBrands = queryString["brands"];
        SearchModelObj.SortOption = queryString["sort"];

        // Load categories
        Categories = await Context.Products
            .Select(p => p.Category)
            .Distinct()
            .ToListAsync();

        // Load products
        var query = Context.Products.AsQueryable();

        if (!string.IsNullOrEmpty(SearchModelObj.SearchText))
        {
            query = query.Where(p => p.Name.Contains(SearchModelObj.SearchText) ||
                                     p.Description.Contains(SearchModelObj.SearchText));
        }
        
        // #################### FILTERS ####################

        if (!string.IsNullOrEmpty(SearchModelObj.SelectedCategory))
        {
            query = query.Where(p => p.Category == SearchModelObj.SelectedCategory);
        }

        // 取得搜尋及過濾分類後的品牌列表
        Brands = await query
            .Select(p => p.Brand)
            .Distinct()
            .ToListAsync();

        // 過濾品牌
        if (!string.IsNullOrEmpty(SearchModelObj.FilterBrands))
        {
            // FilterBrands 是逗號分隔的品牌名稱，例如 "Apple,Samsung"，還原回陣列後做為 OR 條件
            var brands = SearchModelObj.FilterBrands.Split(',');
            query = query.Where(p => brands.Contains(p.Brand));
        }

        // Apply sorting
        query = SearchModelObj.SortOption switch
        {
            "price_asc" => query.OrderBy(p => p.Price),
            "price_desc" => query.OrderByDescending(p => p.Price),
            "rating" => query.OrderByDescending(p => p.Reviews.Average(r => r.Rating)),
            "newest" => query.OrderByDescending(p => p.CreatedAt),
            _ => query // 預設排序
        };

        // 載入商品列表
        ProductsList = await query.ToListAsync();
    }

    private void RedirectWithNewCategory(string? value)
    {
        RedirectWithNewQuery("category", value);
    }

    private void RedirectWithNewQuery(string key, string? value)
    {
        var uri = new Uri(Navigation.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (string.IsNullOrEmpty(value))
        {
            queryString.Remove(key);
        }
        else
        {
            queryString[key] = value;
        }

        var newUri = $"{uri.GetLeftPart(UriPartial.Path)}";
        if (queryString.Count > 0)
        {
            newUri += $"?{queryString}";
        }

        Navigation.NavigateTo(newUri, forceLoad: true);
    }

    private void RedirectWithNewQueries(Dictionary<string, string> newQueries)
    {
        var uri = new Uri(Navigation.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);

        foreach (var (key, value) in newQueries)
        {
            if (string.IsNullOrEmpty(value))
            {
                queryString.Remove(key);
            }
            else
            {
                queryString[key] = value;
            }
        }

        var newUri = $"{uri.GetLeftPart(UriPartial.Path)}";
        if (queryString.Count > 0)
        {
            newUri += $"?{queryString}";
        }

        Navigation.NavigateTo(newUri, forceLoad: true);
    }

    private void ToggleBrandFilter(string brand)
    {
        var uri = new Uri(Navigation.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);

        var currentBrands = queryString["brands"]?.Split(',')
            .Where(b => !string.IsNullOrEmpty(b))
            .ToList() ?? new List<string>();

        if (currentBrands.Contains(brand))
        {
            currentBrands.Remove(brand);
        }
        else
        {
            currentBrands.Add(brand);
        }

        if (currentBrands.Any())
        {
            queryString["brands"] = string.Join(",", currentBrands);
        }
        else
        {
            queryString.Remove("brands");
        }

        var newUri = $"{uri.GetLeftPart(UriPartial.Path)}";
        if (queryString.Count > 0)
        {
            newUri += $"?{queryString}";
        }

        Navigation.NavigateTo(newUri, forceLoad: true);
    }

    private void OnSortOptionChanged(string? value)
    {
        SearchModelObj.SortOption = value;
        RedirectWithNewQuery("sort", value);
    }

    private void OnSortChanged(ChangeEventArgs e)
    {
        /*
        你有兩個選擇：
        使用 forceLoad: true：這會重新載入整個頁面，確保所有狀態都是最新的。
        手動更新：不重新載入頁面，而是手動更新狀態和重新獲取資料。
        我建議使用第一種方法（forceLoad: true），因為它更可靠且能確保所有狀態都正確更新。如果你想要更好的使用者體驗（不重新載入整個頁面），可以使用註解中的第二種方法。
        選擇哪種方法取決於你的需求：
        第一種方法（forceLoad: true）更簡單且可靠
        第二種方法（手動更新）提供更好的使用者體驗，但需要更謹慎地管理狀態
        */
        var value = e.Value?.ToString();

        RedirectWithNewQuery("sort", value);

        return;

        var uri = new Uri(Navigation.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (string.IsNullOrEmpty(value))
        {
            queryString.Remove("sort");
        }
        else
        {
            queryString["sort"] = value;
        }

        var newUri = $"{uri.GetLeftPart(UriPartial.Path)}";
        if (queryString.Count > 0)
        {
            newUri += $"?{queryString}";
        }

        // 使用 NavigateTo 的第二個參數 forceLoad 來強制重新載入頁面
        Navigation.NavigateTo(newUri, forceLoad: true);

        // 或者，如果不想重新載入整個頁面，可以這樣做：
        /*
        Navigation.NavigateTo(newUri);
        SortOption = value;
        await OnInitializedAsync();
        StateHasChanged();
        */
    }

    private void ShowReviews(Product product)
    {
        selectedProduct = product;
        isReviewsVisible = true;
    }

    private void HideReviews()
    {
        isReviewsVisible = false;
        selectedProduct = null;
    }

}