@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@inject ILogger<NavMenu> Logger
@rendermode InteractiveServer

<div class="navbar-content">
    <a class="navbar-brand" href="">史創敗</a>
    <EditForm Model="@SearchModelObj" OnValidSubmit="HandleSearch" FormName="my-search-form">
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="search-form">
            <InputSelect class="category-select" @bind-Value="SearchModelObj.SelectedCategory">
                <option value="">所有分類</option>
                @foreach (var category in Categories)
                {
                    <option value="@category">@category</option>
                }
            </InputSelect>


            <InputText class="search-input" placeholder="搜尋商品..."
                       @bind-Value="SearchModelObj.SearchText"/>

            @* <InputText visible="false" @bind-Value="SearchModelObj.FilterBrands"/>

            <InputText visible="false" @bind-Value="SearchModelObj.SortOption"/> *@

            <InputSelect class="version-select" @bind-Value="SearchModelObj.SearchVersion">
                <option value="">預設搜尋</option>
                @* <option value="v1">搜尋 V1</option> *@
                <option value="v2">精準搜尋</option>
                <option value="v3">向量搜尋</option>
            </InputSelect>

            <button type="submit" class="search-button">
                @* <i class="bi bi-search"></i>搜尋 *@
                搜尋
            </button>
        </div>
    </EditForm>

    <NavLink class="nav-link cart-link" href="cart">
        <span class="cart-icon">
            <i class="bi bi-cart3"></i>
            <span class="cart-count">0</span>
        </span>
        購物車
    </NavLink>
</div>

@code {

    [SupplyParameterFromForm(FormName = "my-search-form")]
    private SearchModel SearchModelObj { get; set; } = new SearchModel();

// private string? SelectedCategory { get; set; } = string.Empty;
// private string? SearchText { get; set; } = string.Empty;
    private List<string> Categories { get; set; } = new();

    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    [Inject] private StrongBuyContext Context { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // 解析當前的 URI 並取得 query string 參數
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("searchversion", out var searchVersion))
        {
            SearchModelObj.SearchVersion = searchVersion;
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("q", out var searchText))
        {
            SearchModelObj.SearchText = searchText;
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var category))
        {
            SearchModelObj.SelectedCategory = category;
        }

        // filter by brands
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("brands", out var brands))
        {
            SearchModelObj.FilterBrands = brands;
        }

        // sort
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("sort", out var sort))
        {
            SearchModelObj.SortOption = sort;
        }


        // 載入所有分類
        Categories = await Context.Products
            .Select(p => p.Category)
            .Distinct()
            .ToListAsync();
    }

    private void HandleSearch()
    {
        Logger.LogInformation("Start searching...");

        var queryParams = new List<string>();

        string urlpath = "/search";
        if (!string.IsNullOrWhiteSpace(SearchModelObj.SearchVersion))
        {
            urlpath += Uri.EscapeDataString(SearchModelObj.SearchVersion);
            queryParams.Add($"searchversion={Uri.EscapeDataString(SearchModelObj.SearchVersion)}");
        }

        if (!string.IsNullOrWhiteSpace(SearchModelObj.SearchText))
        {
            queryParams.Add($"q={Uri.EscapeDataString(SearchModelObj.SearchText)}");
        }

        if (!string.IsNullOrWhiteSpace(SearchModelObj.SelectedCategory))
        {
            queryParams.Add($"category={Uri.EscapeDataString(SearchModelObj.SelectedCategory)}");
        }

        // filter by brands
        if (!string.IsNullOrWhiteSpace(SearchModelObj.FilterBrands))
        {
            queryParams.Add($"brands={Uri.EscapeDataString(SearchModelObj.FilterBrands)}");
        }

        // 組合 query string
        var queryString = queryParams.Any() ? "?" + string.Join("&", queryParams) : "";

        /*
         * The issue occurs because the SearchModelObj properties are being reset to empty strings after the form submission, but the page is not reloaded, so the initial query string values are still present in the URL. When the form is submitted again, the initial values are used.  To fix this, you should ensure that the SearchModelObj properties are correctly updated before navigating to the new URL. You can achieve this by updating the HandleSearch method to include a check for the current query string values and update them accordingly.
         */
        NavigationManager.NavigateTo($"{urlpath}{queryString}", forceLoad: true); // 加上 forceLoad 參數以強制重新載入頁面，不然 query string 不會被變更

        // Clear the search model to prevent repeated use of the initial values
        SearchModelObj.SearchText = string.Empty;
        SearchModelObj.SelectedCategory = string.Empty;
        SearchModelObj.SortOption = string.Empty;
        SearchModelObj.FilterBrands = string.Empty;
        SearchModelObj.SearchVersion = string.Empty;
    }

    public class SearchModel
    {
        public string? SearchText { get; set; } = string.Empty;

        // filter by category
        public string? SelectedCategory { get; set; } = string.Empty;

        public double? MinPrice { get; set; } = null;

        public double? MaxPrice { get; set; } = null;

        // filter by brands，多個品牌以逗號分隔
        public string? FilterBrands { get; set; } = string.Empty;

        public string? FilterColors { get; set; } = string.Empty;

        public string? FilterSizes { get; set; } = string.Empty;

        public string? FilterMaterials { get; set; } = string.Empty;

        //public string? FilterTags { get; set; } = string.Empty;

        // sort by price, rating, newest
        public string? SortOption { get; set; } = string.Empty;

        public string? SearchVersion { get; set; } = string.Empty;
    }

}