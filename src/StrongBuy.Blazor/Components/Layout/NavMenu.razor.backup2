@using Microsoft.EntityFrameworkCore
@inject ILogger<NavMenu> Logger

<div class="navbar-content">
    <a class="navbar-brand" href="">史創敗</a>
    <form method="post" class="search-form" @onsubmit="HandleSearch" @onsubmit:preventDefault @formname="search-form">
        <AntiforgeryToken/>
        @* <select class="category-select" @bind-Value="selectedCategory" @bind-Value:event="onchange"> *@
        <select class="category-select" @bind="SelectedCategory">
            <option value="">所有分類</option>
            @foreach (var category in Categories)
            {
                <option value="@category">@category</option>
            }
        </select>
        @* <input type="text" class="search-input" placeholder="搜尋商品..." @bind-Value="searchText" @bind-Value:event="oninput"/> *@
        <input
            type="text" class="search-input" placeholder="搜尋商品..."
            value="@SearchText"
            @oninput="OnInputSearchText" />
        <button type="submit" class="search-button">
            <i class="bi bi-search"></i>搜尋
        </button>
    </form>

    <NavLink class="nav-link cart-link" href="cart">
        <span class="cart-icon">
            <i class="bi bi-cart3"></i>
            <span class="cart-count">3</span>
        </span>
        購物車
    </NavLink>
</div>

<div>
    <label>
        SearchText:
        <input @oninput="OnInputSearchText" />
    </label>
</div>
<div>
    <ul>
        <li><code>SelectedCategory</code>: @SelectedCategory</li>
        <li><code>SearchText</code>: @SearchText</li>
    </ul>
</div>

@code {
    private string? SelectedCategory { get; set; } = string.Empty;
    private string? SearchText { get; set; } = string.Empty;
    private List<string> Categories { get; set; } = new();

    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    [Inject] private StrongBuyContext Context { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // 載入所有分類
        Categories = await Context.Products
            .Select(p => p.Category)
            .Distinct()
            .ToListAsync();
    }

    private void OnInputSearchText(ChangeEventArgs e)
    {
        SearchText = e.Value.ToString();
    }

    private void HandleSearch()
    {
        Logger.LogInformation("Start searching...");

        var queryParams = new List<string>();

        if (!string.IsNullOrWhiteSpace(SelectedCategory))
        {
            queryParams.Add($"category={Uri.EscapeDataString(SelectedCategory)}");
        }

        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            queryParams.Add($"q={Uri.EscapeDataString(SearchText)}");
        }

        var queryString = queryParams.Any() ? "?" + string.Join("&", queryParams) : "";
        NavigationManager.NavigateTo($"/search{queryString}");
    }

}